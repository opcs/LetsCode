Depending on the requirement/problem we chose the particular data structure to store the graph.

Choosing structure depends on the type of operations you need to perform on the graph
The two fundamental data structures for representing graphs are the

• adjacency matrix - 
• adjacency list -> mostly used, for sparse-graph (one in which most pairs of vertices are not connected)
• Adjacency Set, Linked list, ArrayList, Map ...
  
Applications:
• Representing relationships between components in electronic circuits
• Transportation networks: Highway network, Flight network
• Computer networks: Local area network, Internet, Web
• Databases: For representing ER (Entity Relationship) diagrams in databases, for representing dependency of tables in databases

Applications of DFS
• Topological sorting
• Finding connected components
• Finding articulation points (cut vertices) of the graph
• Finding strongly connected components
• Solving puzzles such as mazes

Applications of BFS
• Finding all connected components in a graph
• Finding all nodes within one connected component
• Finding the shortest path between two nodes
• Testing a graph for bipartiteness
Below are some sample which depicts the DS usage for a specific type of problems:

1. To find the vertex with max degree and do deletion on both vertexes and edges.
PriorityQueue<Vertex> vertexes;
Map<vertex, List<Edge>> : vertex-> List-of-edge-connected-to-it

2. To find the all direct connected cities from a particular city
	Set<Vertex>vertices;
    Set<Edge>edges;
    Map<Vertex,List<Edge>>adj;

3. find the count of vertices which are at distance d from vertex v in a graph
I/p: number_of_vertices distance 4 1
	take various possible input pair of vertices: 1 2, 1 3, 2 3, 3 4
A. find vertices which are at distance 1 from vertex 1 => 2 (2 and 3) : use map(v->List<V> neighbour)
B. find the distance of vertex 4 from 1 => 2                          : start DFS from 1 till get to 4

4. start from root node in graph and display LeftToRight for even level and RightToLeft for odd level

These are some of the basic algos that you should know for solving all kind of problems related to graphs. 
bfs and dfs-ways of traversal.
shortest path->kruskal and prim
Dijkstra’s algorithm
check for a cycle in directed and undirected graph…

pseudocode:
---------------------------------------------------------------------------------
	 DFS(G,v)   ( v is the vertex where the search starts )
         Stack S := {};   ( start with an empty stack )
         for each vertex u, set visited[u] := false;    // Set<VNode<v,boolean>>
         push S, v;
         while (S is not empty) do
            u := pop S;
            if (not visited[u]) then
               visited[u] := true;
               for each unvisited neighbour w of u      // v-->List<V>
                  push S, w;
            end if
         end while
      END DFS()
-----------------------------------------------------------------------------------
	  
	  BFS (G, s)     //Where G is the graph and s is the source node
      let Q be queue.
      Q.enqueue( s ) //Inserting s in queue until all its neighbour vertices are marked.

      mark s as visited.
      while ( Q is not empty)
           //Removing that vertex from queue,whose neighbour will be visited now
           v  =  Q.dequeue( )

          //processing all the neighbours of v  
          for each neighbours w of v in Graph G
               if w is not visited 
                        Q.enqueue( w )  //Stores w in Q to further visit its neighbour
                        mark w as visited.
       END BFS() 
 --------------------------------------------------------------------------------------
Backtracking Pseudocode :
methodical way of trying out various sequences of decisions, until you find one that “works”.

        boolean pathFound(Position p) {
            if (p is finish) return true;
            
            foreach option O from p {
                boolean isThereAPath = pathFound(O);
                if (isThereAPath) return true; // We found a path using option O
            }
            // We have tried all options from this position and none of the options lead to finish. 
            // Hence there is no solution possible to finish
            return false;
        }
In general, the usual pseudocode for any backtracking solution is :

        boolean solve(Node n) {
            if n is a goal node, return true
            
            foreach option O possible from n {
                if solve(O) succeeds, return true
            }
            return false
        }